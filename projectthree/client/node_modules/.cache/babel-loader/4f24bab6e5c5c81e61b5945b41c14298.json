{"ast":null,"code":"import React from'react';import{render}from'react-dom';import Chart from\"../components/MyChart\";import ReactEchartsCore from'echarts-for-react/lib/core';import{Container,Row,Col}from\"../components/Grid\";import\"./style.css\";import{Card}from\"react-bootstrap\";import{Input}from\"../components/Form\";import Jumbotron from\"../components/Jumbotron\";function MoodTracker(){var todaysMoods=[];// let myChart;\nfetch(\"/api/todaysMood\").then(function(response){return response.json();}).then(function(data){// save db data on global variable\ntodaysMoods=data;populateTotal();populateTable();// populateChart();\n});function populateTotal(){// reduce todaysMood amounts to a single total value\nvar total=todaysMoods.reduce(function(total,t){return total+parseInt(t.value);},0);var totalEl=document.querySelector(\"#total\");totalEl.textContent=total;}function populateTable(){var tbody=document.querySelector(\"#tbody\");tbody.innerHTML=\"\";todaysMoods.forEach(function(todaysMood){// create and populate a table row\nvar tr=document.createElement(\"tr\");tr.innerHTML=\"\\n      <td>\".concat(todaysMood.name,\"</td>\\n      <td>\").concat(todaysMood.value,\"</td>\\n    \");tbody.appendChild(tr);});}// function populateChart() {\n//   // copy array and reverse it\n//   let reversed = todaysMoods.slice().reverse();\n//   let sum = 0;\n//   // create date labels for chart\n//   let labels = reversed.map(t => {\n//     let date = new Date(t.date);\n//     return `${date.getMonth() + 1}/${date.getDate()}/${date.getFullYear()}`;\n//   });\n//   // create incremental values for chart\n//   let data = reversed.map(t => {\n//     sum += parseInt(t.value);\n//     return sum;\n//   });\n//   // remove old chart if it exists\n//   if (myChart) {\n//     myChart.destroy();\n//   }\n// }\nfunction sendTodaysMood(isAdding){var didToday=document.querySelector(\"#did-today\");var moodRate=document.querySelector(\"#rating-mood\");var errorEl=document.querySelector(\".form .error\");// validate form\nif(didToday.value===\"\"||moodRate.value===\"\"){errorEl.textContent=\"Missing Information\";return;}else{errorEl.textContent=\"\";}// create record\nvar todaysMood={name:didToday.value,value:moodRate.value,date:new Date().toISOString()};// if subtracting funds, convert amount to negative number\nif(!isAdding){todaysMood.value*=-1;}// add to beginning of current array of data\ntodaysMoods.unshift(todaysMood);// re-run logic to populate ui with new record\n//  populateChart();\npopulateTable();populateTotal();// also send to server\nfetch(\"/api/todaysMood\",{method:\"POST\",body:JSON.stringify(todaysMood),headers:{Accept:\"application/json, text/plain, */*\",\"Content-Type\":\"application/json\"}}).then(function(response){return response.json();}).then(function(data){if(data.errors){errorEl.textContent=\"Missing Information\";}else{// clear form\ndidToday.value=\"\";moodRate.value=\"\";}}).catch(function(err){// fetch failed, so save in indexed db\n//  saveRecord(todaysMood);\n// clear form\ndidToday.value=\"\";moodRate.value=\"\";});}document.querySelector(\"#saveMood-btn\").onclick=function(){sendTodaysMood(true);};return/*#__PURE__*/React.createElement(Container,{fluid:true},/*#__PURE__*/React.createElement(\"form\",null,/*#__PURE__*/React.createElement(Card,null,/*#__PURE__*/React.createElement(Card.Body,null,/*#__PURE__*/React.createElement(Jumbotron,null,/*#__PURE__*/React.createElement(\"h1\",null,\"TRACK YOUR MOOD\")),/*#__PURE__*/React.createElement(Row,{className:\"form-group\"},/*#__PURE__*/React.createElement(Col,{size:\"md-12\"},/*#__PURE__*/React.createElement(\"h3\",null,\" How do you feel today?\"),/*#__PURE__*/React.createElement(\"button\",{id:\"moodRate\",className:\"gmoodBtton btn-success\"},\"GOOD\"),/*#__PURE__*/React.createElement(\"button\",{id:\"moodRate\",className:\"ymoodBtton btn-success\"},\"AVERAGE\"),/*#__PURE__*/React.createElement(\"button\",{id:\"moodRate\",className:\"rmoodBtton btn-success\"},\"BAD\"))),/*#__PURE__*/React.createElement(Row,{className:\"form-group\"},/*#__PURE__*/React.createElement(Col,{size:\"md-12\"},/*#__PURE__*/React.createElement(\"h3\",null,\"What Did You Do Today??\"),/*#__PURE__*/React.createElement(Input,{className:\"why\",type:\"why\",name:\"why\",id:\"why\",placeholder:\"Why ...?\"}))),/*#__PURE__*/React.createElement(Row,{className:\"form-group\"},/*#__PURE__*/React.createElement(Col,{size:\"md-12\"},/*#__PURE__*/React.createElement(\"h3\",null,\"What did you do today?\"),/*#__PURE__*/React.createElement(Input,{className:\"didToday\",type:\"didToday\",name:\"didToday\",id:\"didToday\",placeholder:\"Today i did..\"})))),/*#__PURE__*/React.createElement(\"div\",{className:\"main chart-wrapper\"},/*#__PURE__*/React.createElement(ReactEchartsCore,{Chart:Chart})),/*#__PURE__*/React.createElement(Card.Body,null))));}export default MoodTracker;","map":{"version":3,"sources":["/Users/clairevandenberg/Desktop/coding_boot_camp/Projects/ProjectThree/projectthree/client/src/pages/MoodTracker.js"],"names":["React","render","Chart","ReactEchartsCore","Container","Row","Col","Card","Input","Jumbotron","MoodTracker","todaysMoods","fetch","then","response","json","data","populateTotal","populateTable","total","reduce","t","parseInt","value","totalEl","document","querySelector","textContent","tbody","innerHTML","forEach","todaysMood","tr","createElement","name","appendChild","sendTodaysMood","isAdding","didToday","moodRate","errorEl","date","Date","toISOString","unshift","method","body","JSON","stringify","headers","Accept","errors","catch","err","onclick"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { render } from 'react-dom';\nimport Chart from \"../components/MyChart\";\nimport ReactEchartsCore from 'echarts-for-react/lib/core';\nimport { Container, Row, Col } from \"../components/Grid\";\nimport \"./style.css\";\nimport { Card } from \"react-bootstrap\";\nimport { Input } from \"../components/Form\";\nimport Jumbotron from \"../components/Jumbotron\";\n\nfunction MoodTracker (){\n\n  let todaysMoods = [];\n  // let myChart;\n  \n  fetch(\"/api/todaysMood\")\n  .then(response => {\n    return response.json();\n  })\n  .then(data => {\n    // save db data on global variable\n    todaysMoods = data;\n\n    populateTotal();\n    populateTable();\n    // populateChart();\n  });\n\n  function populateTotal() {\n    // reduce todaysMood amounts to a single total value\n    let total = todaysMoods.reduce((total, t) => {\n      return total + parseInt(t.value);\n    }, 0);\n  \n    let totalEl = document.querySelector(\"#total\");\n    totalEl.textContent = total;\n  }\n\n  function populateTable() {\n    let tbody = document.querySelector(\"#tbody\");\n    tbody.innerHTML = \"\";\n  \n    todaysMoods.forEach(todaysMood => {\n      \n      // create and populate a table row\n    let tr = document.createElement(\"tr\");\n    tr.innerHTML = `\n      <td>${todaysMood.name}</td>\n      <td>${todaysMood.value}</td>\n    `;\n\n    tbody.appendChild(tr);\n  });\n}\n\n// function populateChart() {\n//   // copy array and reverse it\n//   let reversed = todaysMoods.slice().reverse();\n//   let sum = 0;\n\n//   // create date labels for chart\n//   let labels = reversed.map(t => {\n//     let date = new Date(t.date);\n//     return `${date.getMonth() + 1}/${date.getDate()}/${date.getFullYear()}`;\n//   });\n\n//   // create incremental values for chart\n//   let data = reversed.map(t => {\n//     sum += parseInt(t.value);\n//     return sum;\n//   });\n\n//   // remove old chart if it exists\n//   if (myChart) {\n//     myChart.destroy();\n//   }\n\n \n// }\n\n\nfunction sendTodaysMood(isAdding) {\n  let didToday = document.querySelector(\"#did-today\");\n  let moodRate = document.querySelector(\"#rating-mood\");\n  let errorEl = document.querySelector(\".form .error\");\n\n  // validate form\n  if (didToday.value === \"\" || moodRate.value === \"\") {\n    errorEl.textContent = \"Missing Information\";\n    return;\n  }\n  else {\n    errorEl.textContent = \"\";\n  }\n\n// create record\nlet todaysMood = {\n  name: didToday.value,\n  value: moodRate.value,\n  date: new Date().toISOString()\n};\n\n// if subtracting funds, convert amount to negative number\nif (!isAdding) {\n  todaysMood.value *= -1;\n}\n\n// add to beginning of current array of data\ntodaysMoods.unshift(todaysMood);\n\n // re-run logic to populate ui with new record\n//  populateChart();\n populateTable();\n populateTotal();\n \n // also send to server\n fetch(\"/api/todaysMood\", {\n   method: \"POST\",\n   body: JSON.stringify(todaysMood),\n   headers: {\n     Accept: \"application/json, text/plain, */*\",\n     \"Content-Type\": \"application/json\"\n   }\n })\n .then(response => {    \n   return response.json();\n })\n .then(data => {\n   if (data.errors) {\n     errorEl.textContent = \"Missing Information\";\n   }\n   else {\n     // clear form\n     didToday.value = \"\";\n     moodRate.value = \"\";\n   }\n })\n .catch(err => {\n   // fetch failed, so save in indexed db\n  //  saveRecord(todaysMood);\n\n   // clear form\n   didToday.value = \"\";\n   moodRate.value = \"\";\n });\n}\n\ndocument.querySelector(\"#saveMood-btn\").onclick = function() {\n sendTodaysMood(true);\n};\n\n  return (\n    <Container fluid>\n    <form>\n       <Card>\n         <Card.Body>\n         <Jumbotron>\n              <h1>TRACK YOUR MOOD</h1>\n            </Jumbotron>\n\n            <Row className=\"form-group\">\n            <Col size=\"md-12\">\n            <h3> How do you feel today?</h3>\n\n            <button id = \"moodRate\" className=\"gmoodBtton btn-success\"> \n                    GOOD\n            </button>\n            <button id = \"moodRate\" className=\"ymoodBtton btn-success\"> \n                    AVERAGE\n            </button>\n            <button id = \"moodRate\" className=\"rmoodBtton btn-success\"> \n                    BAD\n            </button>\n                </Col>\n                </Row>\n            \n          <Row className=\"form-group\">\n            <Col size=\"md-12\">\n            <h3>What Did You Do Today??</h3>\n                  <Input \n                  className=\"why\"\n                  type=\"why\" \n                  name=\"why\" \n                  id=\"why\" \n                  placeholder=\"Why ...?\" \n                  />\n                </Col>\n                </Row>\n     \n          <Row className=\"form-group\">\n            <Col size=\"md-12\">\n            <h3>What did you do today?</h3>\n                  <Input \n                  className=\"didToday\"\n                  type=\"didToday\" \n                  name=\"didToday\" \n                  id=\"didToday\" \n                  placeholder=\"Today i did..\" \n                  />\n                </Col>\n                </Row>\n          </Card.Body>\n          <div className=\"main chart-wrapper\">\n          <ReactEchartsCore\n          Chart={Chart}\n          />\n          </div>\n          <Card.Body>\n\n\n          </Card.Body>\n          </Card>\n          </form>\n          </Container>\n          \n    );\n  }\n  \n  export default MoodTracker;\n"]},"metadata":{},"sourceType":"module"}