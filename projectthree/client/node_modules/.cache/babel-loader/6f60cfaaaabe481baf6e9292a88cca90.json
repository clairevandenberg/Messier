{"ast":null,"code":"import React from \"react\";\nimport Container from \"../components/Container\";\nimport Row from \"../components/Row\";\nimport Col from \"../components/Col\";\nlet moodTracker = [];\nlet myChart;\nfetch(\"/api/moodTracker\").then(response => {\n  return response.json();\n}).then(data => {\n  // save db data on global variable\n  moodTracker = data;\n  populateTotal();\n  populateTable();\n  populateChart();\n});\n\nfunction populateTotal() {\n  // reduce moodTracker amounts to a single total value\n  let total = moodTracker.reduce((total, t) => {\n    return total + parseInt(t.value);\n  }, 0);\n  let totalEl = document.querySelector(\"#total\");\n  totalEl.textContent = total;\n}\n\nfunction populateTable() {\n  let tbody = document.querySelector(\"#tbody\");\n  tbody.innerHTML = \"\";\n  moodTracker.forEach(moodTracker => {\n    // create and populate a table row\n    let tr = document.createElement(\"tr\");\n    tr.innerHTML = \"\\n      <td>\".concat(moodTracker.name, \"</td>\\n      <td>\").concat(moodTracker.value, \"</td>\\n    \");\n    tbody.appendChild(tr);\n  });\n}\n\nfunction populateChart() {\n  // copy array and reverse it\n  let reversed = moodTracker.slice().reverse();\n  let sum = 0; // create date labels for chart\n\n  let labels = reversed.map(t => {\n    let date = new Date(t.date);\n    return \"\".concat(date.getMonth() + 1, \"/\").concat(date.getDate(), \"/\").concat(date.getFullYear());\n  }); // create incremental values for chart\n\n  let data = reversed.map(t => {\n    sum += parseInt(t.value);\n    return sum;\n  }); // remove old chart if it exists\n\n  if (myChart) {\n    myChart.destroy();\n  }\n\n  let ctx = document.getElementById(\"myChart\").getContext(\"2d\");\n  myChart = new Chart(ctx, {\n    type: 'line',\n    data: {\n      labels,\n      datasets: [{\n        label: \"Total Over Time\",\n        fill: true,\n        backgroundColor: \"#6666ff\",\n        data\n      }]\n    }\n  });\n}\n\nfunction sendMoodTracker(isAdding) {\n  let nameEl = document.querySelector(\"#t-name\");\n  let amountEl = document.querySelector(\"#t-amount\");\n  let errorEl = document.querySelector(\".form .error\"); // validate form\n\n  if (nameEl.value === \"\" || amountEl.value === \"\") {\n    errorEl.textContent = \"Missing Information\";\n    return;\n  } else {\n    errorEl.textContent = \"\";\n  } // create record\n\n\n  let moodTracker = {\n    name: nameEl.value,\n    value: amountEl.value,\n    date: new Date().toISOString()\n  }; // if subtracting funds, convert amount to negative number\n\n  if (!isAdding) {\n    moodTracker.value *= -1;\n  } // add to beginning of current array of data\n\n\n  moodTracker.unshift(moodTracker); // re-run logic to populate ui with new record\n\n  populateChart();\n  populateTable();\n  populateTotal(); // also send to server\n\n  fetch(\"/api/moodTracker\", {\n    method: \"POST\",\n    body: JSON.stringify(moodTracker),\n    headers: {\n      Accept: \"application/json, text/plain, */*\",\n      \"Content-Type\": \"application/json\"\n    }\n  }).then(response => {\n    return response.json();\n  }).then(data => {\n    if (data.errors) {\n      errorEl.textContent = \"Missing Information\";\n    } else {\n      // clear form\n      nameEl.value = \"\";\n      amountEl.value = \"\";\n    }\n  }).catch(err => {\n    // fetch failed, so save in indexed db\n    saveRecord(moodTracker); // clear form\n\n    nameEl.value = \"\";\n    amountEl.value = \"\";\n  });\n}\n\ndocument.querySelector(\"#add-btn\").onclick = function () {\n  sendMoodTracker(true);\n};\n\ndocument.querySelector(\"#sub-btn\").onclick = function () {\n  sendMoodTracker(false);\n};","map":{"version":3,"sources":["/Users/clairevandenberg/Desktop/coding_boot_camp/Projects/ProjectThree/projectthree/client/src/pages/MoodTracker.js"],"names":["React","Container","Row","Col","moodTracker","myChart","fetch","then","response","json","data","populateTotal","populateTable","populateChart","total","reduce","t","parseInt","value","totalEl","document","querySelector","textContent","tbody","innerHTML","forEach","tr","createElement","name","appendChild","reversed","slice","reverse","sum","labels","map","date","Date","getMonth","getDate","getFullYear","destroy","ctx","getElementById","getContext","Chart","type","datasets","label","fill","backgroundColor","sendMoodTracker","isAdding","nameEl","amountEl","errorEl","toISOString","unshift","method","body","JSON","stringify","headers","Accept","errors","catch","err","saveRecord","onclick"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport Container from \"../components/Container\";\nimport Row from \"../components/Row\";\nimport Col from \"../components/Col\";\n\n\nlet moodTracker = [];\nlet myChart;\n\nfetch(\"/api/moodTracker\")\n  .then(response => {\n    return response.json();\n  })\n  .then(data => {\n    // save db data on global variable\n    moodTracker = data;\n\n    populateTotal();\n    populateTable();\n    populateChart();\n  });\n\nfunction populateTotal() {\n  // reduce moodTracker amounts to a single total value\n  let total = moodTracker.reduce((total, t) => {\n    return total + parseInt(t.value);\n  }, 0);\n\n  let totalEl = document.querySelector(\"#total\");\n  totalEl.textContent = total;\n}\n\nfunction populateTable() {\n  let tbody = document.querySelector(\"#tbody\");\n  tbody.innerHTML = \"\";\n\n  moodTracker.forEach(moodTracker => {\n    // create and populate a table row\n    let tr = document.createElement(\"tr\");\n    tr.innerHTML = `\n      <td>${moodTracker.name}</td>\n      <td>${moodTracker.value}</td>\n    `;\n\n    tbody.appendChild(tr);\n  });\n}\n\nfunction populateChart() {\n  // copy array and reverse it\n  let reversed = moodTracker.slice().reverse();\n  let sum = 0;\n\n  // create date labels for chart\n  let labels = reversed.map(t => {\n    let date = new Date(t.date);\n    return `${date.getMonth() + 1}/${date.getDate()}/${date.getFullYear()}`;\n  });\n\n  // create incremental values for chart\n  let data = reversed.map(t => {\n    sum += parseInt(t.value);\n    return sum;\n  });\n\n  // remove old chart if it exists\n  if (myChart) {\n    myChart.destroy();\n  }\n\n  let ctx = document.getElementById(\"myChart\").getContext(\"2d\");\n\n  myChart = new Chart(ctx, {\n    type: 'line',\n      data: {\n        labels,\n        datasets: [{\n            label: \"Total Over Time\",\n            fill: true,\n            backgroundColor: \"#6666ff\",\n            data\n        }]\n    }\n  });\n}\n\nfunction sendMoodTracker(isAdding) {\n  let nameEl = document.querySelector(\"#t-name\");\n  let amountEl = document.querySelector(\"#t-amount\");\n  let errorEl = document.querySelector(\".form .error\");\n\n  // validate form\n  if (nameEl.value === \"\" || amountEl.value === \"\") {\n    errorEl.textContent = \"Missing Information\";\n    return;\n  }\n  else {\n    errorEl.textContent = \"\";\n  }\n\n  // create record\n  let moodTracker = {\n    name: nameEl.value,\n    value: amountEl.value,\n    date: new Date().toISOString()\n  };\n\n  // if subtracting funds, convert amount to negative number\n  if (!isAdding) {\n    moodTracker.value *= -1;\n  }\n\n  // add to beginning of current array of data\n  moodTracker.unshift(moodTracker);\n\n  // re-run logic to populate ui with new record\n  populateChart();\n  populateTable();\n  populateTotal();\n  \n  // also send to server\n  fetch(\"/api/moodTracker\", {\n    method: \"POST\",\n    body: JSON.stringify(moodTracker),\n    headers: {\n      Accept: \"application/json, text/plain, */*\",\n      \"Content-Type\": \"application/json\"\n    }\n  })\n  .then(response => {    \n    return response.json();\n  })\n  .then(data => {\n    if (data.errors) {\n      errorEl.textContent = \"Missing Information\";\n    }\n    else {\n      // clear form\n      nameEl.value = \"\";\n      amountEl.value = \"\";\n    }\n  })\n  .catch(err => {\n    // fetch failed, so save in indexed db\n    saveRecord(moodTracker);\n\n    // clear form\n    nameEl.value = \"\";\n    amountEl.value = \"\";\n  });\n}\n\ndocument.querySelector(\"#add-btn\").onclick = function() {\n  sendMoodTracker(true);\n};\n\ndocument.querySelector(\"#sub-btn\").onclick = function() {\n  sendMoodTracker(false);\n};\n\n  "]},"metadata":{},"sourceType":"module"}