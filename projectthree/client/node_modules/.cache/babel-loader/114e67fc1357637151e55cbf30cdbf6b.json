{"ast":null,"code":"var _jsxFileName = \"/Users/clairevandenberg/Desktop/coding_boot_camp/Projects/ProjectThree/projectthree/client/src/pages/Journal.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { Container, Row, Col } from \"../components/Grid\";\nimport { JournalList, JournalListItem } from \"../components/List\"; // import { Link } from \"react-router-dom\";\n// import DeleteBtn from \"../components/DeleteBtn\";\n\nimport { Input, TextArea, FormBtn } from \"../components/Form\";\nimport API from \"../utils/API\";\nimport Jumbotron from \"../components/Jumbotron\";\nimport \"../pages/style.css\";\n\nfunction Journal() {\n  // Setting our component's initial state\n  const [journals, setJournals] = useState([]);\n  const [formObject, setFormObject] = useState([]); // Load all journals and store them with setjournals\n\n  useEffect(() => {\n    loadJournals();\n  }, []); // Loads all journals and sets them to journals\n\n  function loadJournals() {\n    API.getJournals().then(res => setJournals(res.data)).catch(err => console.log(err));\n  }\n\n  ; // Deletes a journal from the database with a given id, then reloads journals from the db\n  // function deleteJournal(id) {\n  //   API.deleteJournal(id)\n  //     .then(res => loadJournals())\n  //     .catch(err => console.log(err));\n  // }\n  // Handles updating component state when the user types into the input field\n\n  function handleInputChange(event) {\n    const {\n      name,\n      value\n    } = event.target;\n    setFormObject({ ...formObject,\n      [name]: value\n    });\n  }\n\n  ; // When the form is submitted, use the API.saveJournal method to save the journal data\n  // Then reload journals from the database\n\n  function handleFormSubmit(event) {\n    event.preventDefault();\n\n    if (formObject.title && formObject.content) {\n      API.saveJournal({\n        title: formObject.title,\n        content: formObject.content\n      }).then(res => loadJournals()).catch(err => console.log(err));\n    }\n  }\n\n  return (\n    /*#__PURE__*/\n    // JOURNAL YOUR THOUGHTS HERE\n    React.createElement(Container, {\n      fluid: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 1\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      size: \"md-6\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Jumbotron, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 15\n      }\n    }, \"Whats on your mind..?\")), /*#__PURE__*/React.createElement(\"form\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Input, {\n      onChange: handleInputChange,\n      name: \"title\",\n      placeholder: \"Journal Title (required)\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 15\n      }\n    }), /*#__PURE__*/React.createElement(TextArea, {\n      onChange: handleInputChange,\n      name: \"content\",\n      placeholder: \"Journaling Feild\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 15\n      }\n    }), /*#__PURE__*/React.createElement(FormBtn, {\n      disabled: !(formObject.title && formObject.content),\n      onClick: handleFormSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 15\n      }\n    }, \"Save\"))), /*#__PURE__*/React.createElement(Col, {\n      size: \"md-6 sm-12\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Jumbotron, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 15\n      }\n    }, \"Saved Journal\")), journals.length ? /*#__PURE__*/React.createElement(\"h1\", {\n      className: \"text-center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 15\n      }\n    }, \"No Saved Journals\") : /*#__PURE__*/React.createElement(JournalList, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 17\n      }\n    }, journals.map(journal => {\n      return /*#__PURE__*/React.createElement(JournalListItem, {\n        title: journal.title,\n        content: journal.content,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 21\n        }\n      });\n    })))))\n  );\n}\n\nexport default Journal;","map":{"version":3,"sources":["/Users/clairevandenberg/Desktop/coding_boot_camp/Projects/ProjectThree/projectthree/client/src/pages/Journal.js"],"names":["React","useState","useEffect","Container","Row","Col","JournalList","JournalListItem","Input","TextArea","FormBtn","API","Jumbotron","Journal","journals","setJournals","formObject","setFormObject","loadJournals","getJournals","then","res","data","catch","err","console","log","handleInputChange","event","name","value","target","handleFormSubmit","preventDefault","title","content","saveJournal","length","map","journal"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { Container, Row, Col } from \"../components/Grid\";\nimport { JournalList, JournalListItem } from \"../components/List\";\n// import { Link } from \"react-router-dom\";\n// import DeleteBtn from \"../components/DeleteBtn\";\nimport { Input, TextArea, FormBtn } from \"../components/Form\";\nimport API from \"../utils/API\";\nimport Jumbotron from \"../components/Jumbotron\";\nimport \"../pages/style.css\"\n\n\n\nfunction Journal () {\n    \n  // Setting our component's initial state\n  const [journals, setJournals] = useState ([])\n  const [formObject, setFormObject] = useState([])\n\n    // Load all journals and store them with setjournals\n    useEffect(() => {\n      loadJournals()\n    }, [])\n  \n // Loads all journals and sets them to journals\n function loadJournals() {\n  API.getJournals()\n    .then(res => \n      setJournals(res.data)\n    )\n    .catch(err => console.log(err));\n};\n\n  // Deletes a journal from the database with a given id, then reloads journals from the db\n  // function deleteJournal(id) {\n  //   API.deleteJournal(id)\n  //     .then(res => loadJournals())\n  //     .catch(err => console.log(err));\n  // }\n  // Handles updating component state when the user types into the input field\n  function handleInputChange(event) {\n    const { name, value } = event.target;\n    setFormObject({...formObject, [name]: value})\n  };\n\n  // When the form is submitted, use the API.saveJournal method to save the journal data\n  // Then reload journals from the database\n  function handleFormSubmit(event) {\n    event.preventDefault();\n    if (formObject.title && formObject.content) {\n      API.saveJournal({\n        title: formObject.title,\n        content: formObject.content\n      })\n        .then(res => loadJournals())\n        .catch(err => console.log(err));\n    }\n}\n  return (\n\n    // JOURNAL YOUR THOUGHTS HERE\n<Container fluid>\n        <Row>\n          <Col size=\"md-6\">\n            <Jumbotron>\n              <h1>Whats on your mind..?</h1>\n            </Jumbotron>\n            <form>\n              <Input\n                onChange={handleInputChange}\n                name=\"title\"\n                placeholder=\"Journal Title (required)\"\n              />\n              <TextArea\n                onChange={handleInputChange}\n                name=\"content\"\n                placeholder=\"Journaling Feild\"\n              />\n              <FormBtn\n                disabled={!(formObject.title && formObject.content)}\n                onClick={handleFormSubmit}\n              >\n                Save\n              </FormBtn>\n            </form>\n          </Col>\n\n\n      {/* JOURNAL IS DISPLAYED HERE */}\n          <Col size=\"md-6 sm-12\">\n          <Jumbotron>\n              <h1>Saved Journal</h1>\n            </Jumbotron>\n            {journals.length ? (\n              <h1 className=\"text-center\">No Saved Journals</h1>\n              ) : (\n                <JournalList>\n                  {journals.map(journal => {\n                  return (\n                    <JournalListItem\n                    title={journal.title}\n                    content={journal.content}\n                    />\n                    );\n                  })}\n                </JournalList>\n              )}\n              </Col>\n            </Row>\n          </Container>\n        );\n      }\n                    \n\n\nexport default Journal;\n"]},"metadata":{},"sourceType":"module"}