{"version":3,"sources":["components/Grid/index.js","components/Jumbotron/index.js","pages/UsersAccount.js","components/List/index.js","components/DeleteBtn/index.js","components/Form/index.js","utils/API.js","pages/Journal.js","pages/Login.js","components/MyChart/index.js","pages/MoodTracker.js","components/Nav/index.js","components/Footer/index.js","pages/SignUp.js","App.js","serviceWorker.js","index.js"],"names":["Container","fluid","children","className","Row","Col","size","split","map","join","Jumbotron","style","backgroundColor","fontFamily","clear","alignContent","textAlign","color","height","UsersAccount","Button","href","icon","List","rows","ListItem","DeleteBtn","props","role","tabIndex","Input","TextArea","FormBtn","float","marginBottom","getJournals","axios","get","getJournal","id","deleteJournal","delete","saveBook","journalData","post","Journal","useState","journals","setJournals","formObject","setFormObject","loadJournals","API","then","res","data","catch","err","console","log","handleInputChange","event","target","name","value","useEffect","onChange","placeholder","disabled","title","journalFeild","onClick","preventDefault","saveJournal","length","journal","key","_id","to","author","Login","username","password","onSubmit","e","Card","Body","type","Chart","chartRef","React","createRef","this","myChart","label","reversed","t","date","datasets","update","current","fill","state","feeds","changeData","Component","MoodTracker","todaysMoods","populateTotal","total","reduce","parseInt","document","querySelector","textContent","populateTable","tbody","innerHTML","forEach","todaysMood","tr","createElement","appendChild","fetch","response","json","onclick","isAdding","didToday","moodRate","errorEl","Date","toISOString","unshift","method","body","JSON","stringify","headers","Accept","errors","sendTodaysMood","NavBar","Nav","variant","defaultActiveKey","Item","Link","Footer","SignUp","setUsername","setPassword","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.d0117236.chunk.js","sourcesContent":["import React from \"react\";\n\n// Exporting the Container, Row, and Col components from this file\n\n// This Container component allows us to use a bootstrap container without worrying about class names\nexport function Container({ fluid, children }) {\n  return <div className={`container${fluid ? \"-fluid\" : \"\"}`}>{children}</div>;\n}\n\n// This Row component lets us use a bootstrap row without having to think about class names\nexport function Row({ fluid, children }) {\n  return <div className={`row${fluid ? \"-fluid\" : \"\"}`}>{children}</div>;\n}\n\n// This Col component lets us size bootstrap columns with less syntax\n// e.g. <Col size=\"md-12\"> instead of <div className=\"col-md-12\">\nexport function Col({ size, children }) {\n  return (\n    <div\n      className={size\n        .split(\" \")\n        .map(size => \"col-\" + size)\n        .join(\" \")}\n    >\n      {children}\n    </div>\n  );\n}\n","import React from \"react\";\n\nfunction Jumbotron({ children }) {\n  return (\n    <div\n      style={{ backgroundColor: \"#000034\", fontFamily: \"Montserrat\", clear: \"both\", alignContent: \"centre\", textAlign: \"center\", color: \"#1D84D7\", height: \"200px\"}}\n      className=\"jumbotron\"\n    >\n      {children}\n    </div>\n  );\n}\n\nexport default Jumbotron;\n\n","import React from \"react\";\nimport { Container, Row, Col } from \"../components/Grid\";\nimport \"./style.css\";\nimport Jumbotron from \"../components/Jumbotron\";\nimport Button from 'react-bootstrap/Button';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\n\nfunction UsersAccount() {\n    return (\n      <div>\n        <Container>\n          <Row>\n            <Col size=\"md-12\">\n            <Jumbotron>\n            <h1> Welcome John Doe </h1>\n            </Jumbotron>\n            </Col>\n        </Row>\n\n            <Row>   \n            <Col size=\"md-6\">\n            <Button className=\"Userbutton\" href=\"/moodTracker\">Start Tracking Your Mood...\n            <FontAwesomeIcon icon={['fa', 'edit']}/>\n          \n            </Button>\n            </Col>\n\n            <Col size=\"md-6 sm-12\">\n            <Button className=\"Userbutton\" href=\"/journal\">Start Journaling.\n            <FontAwesomeIcon icon={['fa', 'chart-line']}/>\n            </Button>\n            </Col>\n            </Row>\n\n        </Container>\n      </div>\n    );\n  }\n  \n  export default UsersAccount;\n  ","import React from \"react\";\nimport \"./style.css\";\n\n// This file exports both the List and ListItem components\n\nexport function List({ children }) {\n  return (\n    <div className=\"list-overflow-container\">\n      <ul className=\"list-group\" rows=\"10\">{children}</ul>\n    </div>\n  );\n}\n\nexport function ListItem({ children }) {\n  return <li className=\"list-group-item\">{children}</li>;\n}\n\n\n","import React from \"react\";\nimport \"./style.css\";\n\n// The ...props means, spread all of the passed props onto this element\n// That way we don't have to define them all individually\nfunction DeleteBtn(props) {\n  return (\n    <span className=\"delete-btn\" {...props} role=\"button\" tabIndex=\"0\">\n      ✗\n    </span>\n  );\n}\n\nexport default DeleteBtn;\n","import React from \"react\";\n\n// This file exports the Input, TextArea, and FormBtn components\n\nexport function Input(props) {\n  return (\n    <div className=\"form-group\">\n      <input className=\"form-control\" {...props} />\n    </div>\n  );\n}\n\nexport function TextArea(props) {\n  return (\n    <div className=\"form-group\">\n      <textarea className=\"form-control\" rows=\"10\" {...props} />\n    </div>\n  );\n}\n\nexport function FormBtn(props) {\n  return (\n    <button {...props} style={{ backgroundColor: \"white\", fontFamily: \"Montserrat\", float: \"right\", marginBottom: 10 }} className=\"btn btn-success\">\n      {props.children}\n    </button>\n  );\n}\n","import axios from \"axios\";\n\nexport default {\n  // Gets all journals\n  getJournals: function() {\n    return axios.get(\"/api/journals\");\n  },\n  // Gets the book with the given id\n  getJournal: function(id) {\n    return axios.get(\"/api/journals/\" + id);\n  },\n  // Deletes the book with the given id\n  deleteJournal: function(id) {\n    return axios.delete(\"/api/journals/\" + id);\n  },\n  // Saves a book to the database\n  saveBook: function(journalData) {\n    return axios.post(\"/api/journals\", journalData);\n  }\n};\n","import React, { useState, useEffect } from \"react\";\nimport { Container, Row, Col } from \"../components/Grid\";\nimport { List, ListItem } from \"../components/List\";\nimport { Link } from \"react-router-dom\";\nimport DeleteBtn from \"../components/DeleteBtn\";\nimport { Input, TextArea, FormBtn } from \"../components/Form\";\nimport API from \"../utils/API\";\nimport Jumbotron from \"../components/Jumbotron\";\nimport \"../pages/style.css\"\n\nfunction Journal () {\n    \n  // Setting our component's initial state\n  const [journals, setJournals] = useState ([])\n  const [formObject, setFormObject] = useState([])\n\n    // Load all journals and store them with setjournals\n    useEffect(() => {\n      loadJournals()\n    }, [])\n  \n // Loads all journals and sets them to journals\n function loadJournals() {\n  API.getJournals()\n    .then(res => \n      setJournals(res.data)\n    )\n    .catch(err => console.log(err));\n};\n\n  // Deletes a journal from the database with a given id, then reloads journals from the db\n  function deleteJournal(id) {\n    API.deleteJournal(id)\n      .then(res => loadJournals())\n      .catch(err => console.log(err));\n  }\n  // Handles updating component state when the user types into the input field\n  function handleInputChange(event) {\n    const { name, value } = event.target;\n    setFormObject({...formObject, [name]: value})\n  };\n\n  // When the form is submitted, use the API.saveJournal method to save the journal data\n  // Then reload journals from the database\n  function handleFormSubmit(event) {\n    event.preventDefault();\n    if (formObject.title && formObject.journalFeild) {\n      API.saveJournal({\n        title: formObject.title,\n        journalFeild: formObject.journalFeild\n      })\n        .then(res => loadJournals())\n        .catch(err => console.log(err));\n    }\n}\n  return (\n\n    // JOURNAL YOUR THOUGHTS HERE\n<Container fluid>\n        <Row>\n          <Col size=\"md-6\">\n            <Jumbotron>\n              <h1>Whats on your mind..?</h1>\n            </Jumbotron>\n            <form>\n              <Input\n                onChange={handleInputChange}\n                name=\"title\"\n                placeholder=\"Journal Title (required)\"\n              />\n              <TextArea\n                onChange={handleInputChange}\n                name=\"journalFeild\"\n                placeholder=\"Journaling Feild\"\n              />\n              <FormBtn\n                disabled={!(formObject.title && formObject.journalFeild)}\n                onClick={handleFormSubmit}\n              >\n                Save\n              </FormBtn>\n            </form>\n          </Col>\n\n\n      {/* JOURNAL IS DISPLAYED HERE */}\n          <Col size=\"md-6 sm-12\">\n          <Jumbotron>\n              <h1>Saved Journal</h1>\n            </Jumbotron>\n            {journals.length ? (\n              <List>\n                {journals.map(journal => (\n                  <ListItem key={journal._id}>\n                    <Link to={\"/journals/\" + journal._id}>\n                      <strong>\n                        {journal.title} by {journal.author}\n                      </strong>\n                    </Link>\n                    <DeleteBtn onClick={() => deleteJournal(journal._id)} />\n                  </ListItem>\n                ))}\n              </List>\n            ) : (\n              <h3>No Journals to Display</h3>\n            )}\n          </Col>\n          </Row>\n      </Container>\n );\n}\n\n\nexport default Journal\n","import React, { useState, } from \"react\";\nimport { Container, Row, Col } from \"../components/Grid\";\nimport \"./style.css\";\nimport { Card } from \"react-bootstrap\";\nimport { Input } from \"../components/Form\";\nimport Jumbotron from \"../components/Jumbotron\";\nimport Button from 'react-bootstrap/Button'\n\nfunction Login (){\n\n  const [username] = useState();\n  const [password] = useState();\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    console.log(\"username is \" + username);\n    console.log(\"password is \" + password);\n  };\n\n\n  return (\n    <Container fluid>\n    <form onSubmit={handleSubmit}>\n         <Card.Body>\n         <Jumbotron>\n              <h1>Sign In</h1>\n            </Jumbotron>\n\n            <Row className=\"form-group\">\n            <Col size=\"md-12\">\n                  <Input \n                  className=\"form-control\"\n                  type=\"email\" \n                  name=\"email\" \n                  id=\"exampleemail\" \n                  placeholder=\"Email\" \n                  />\n                </Col>\n                </Row>\n\n                <Row className=\"form-group\">\n                <Col size=\"md-12\">\n                  <Input \n                  type=\"password\" \n                  name=\"password\" \n                  id=\"examplePassword\" \n                  placeholder=\"Password\" \n                  />\n                  </Col>\n                  </Row> \n\n                  <Row className=\"form-group\">\n                  <Col size=\"md-12\">\n                  <Button className=\"buttonSubmit\" type=\"submit\" href=\"/usersAccount\">\n                    LOGIN\n                  </Button>                  \n                  </Col>\n                  </Row> \n                 </Card.Body>\n\n                 <Card.Body>\n                 <Button className=\"buttonAccont\" href=\"/signUp\">Create Account</Button>\n                 </Card.Body>\n                 \n    </form>\n  </Container>         \n       \n    );\n  }\n  \n  export default Login;","import React from 'react';\nimport \"../../pages/style.css\";\nimport MoodTracker from '../../pages/MoodTracker';\n\nclass Chart extends React.Component {\n    constructor(props) {\n      super(props);\n      this.chartRef = React.createRef();\n    }\n  \n    componentDidUpdate() {\n      this.myChart.data.label = this.props.data.reversed.map(t => t.date);\n      this.myChart.data.datasets[0].data = this.props.reversed.data.map(t => t.value);\n      this.myChart.update();\n    }\n  \n    componentDidMount() {\n      this.myChart = new Chart(this.chartRef.current, {\n    type: 'line',\n    data: {\n      label: ['Red', 'Yellow', 'Green'],\n      datasets: [{\n          label: \"Mood Over Time\",\n          fill: true,\n          backgroundColor: \"#1D84D7\",\n          data: [12, 19, 3, 5, 2, 3]\n      }]\n  }\n});\n}\n  \n    render() {\n      return (\n        <div>\n          <MoodTracker \n          data={this.state.feeds[0].data}\n          title={this.state.feeds[0].title}\n          color=\"#1D84D7\">\n        <button onClick={() => this.changeData()}>Update</button>\n          </MoodTracker>\n        </div>\n      )\n    }\n  }\n\n\n  export default Chart;\n","import React from 'react';\nimport { render } from 'react-dom';\nimport Chart from \"../components/MyChart\";\nimport ReactEchartsCore from 'echarts-for-react/lib/core';\nimport { Container, Row, Col } from \"../components/Grid\";\nimport \"./style.css\";\nimport { Card } from \"react-bootstrap\";\nimport { Input } from \"../components/Form\";\nimport Jumbotron from \"../components/Jumbotron\";\n\nfunction MoodTracker (){\n\n  let todaysMoods = [];\n  // let myChart;\n  \n  fetch(\"/api/todaysMood\")\n  .then(response => {\n    return response.json();\n  })\n  .then(data => {\n    // save db data on global variable\n    todaysMoods = data;\n\n    populateTotal();\n    populateTable();\n    // populateChart();\n  });\n\n  function populateTotal() {\n    // reduce todaysMood amounts to a single total value\n    let total = todaysMoods.reduce((total, t) => {\n      return total + parseInt(t.value);\n    }, 0);\n  \n    let totalEl = document.querySelector(\"#total\");\n    totalEl.textContent = total;\n  }\n\n  function populateTable() {\n    let tbody = document.querySelector(\"#tbody\");\n    tbody.innerHTML = \"\";\n  \n    todaysMoods.forEach(todaysMood => {\n      \n      // create and populate a table row\n    let tr = document.createElement(\"tr\");\n    tr.innerHTML = `\n      <td>${todaysMood.name}</td>\n      <td>${todaysMood.value}</td>\n    `;\n\n    tbody.appendChild(tr);\n  });\n}\n\n// function populateChart() {\n//   // copy array and reverse it\n//   let reversed = todaysMoods.slice().reverse();\n//   let sum = 0;\n\n//   // create date labels for chart\n//   let labels = reversed.map(t => {\n//     let date = new Date(t.date);\n//     return `${date.getMonth() + 1}/${date.getDate()}/${date.getFullYear()}`;\n//   });\n\n//   // create incremental values for chart\n//   let data = reversed.map(t => {\n//     sum += parseInt(t.value);\n//     return sum;\n//   });\n\n//   // remove old chart if it exists\n//   if (myChart) {\n//     myChart.destroy();\n//   }\n\n \n// }\n\n\nfunction sendTodaysMood(isAdding) {\n  let didToday = document.querySelector(\"#did-today\");\n  let moodRate = document.querySelector(\"#rating-mood\");\n  let errorEl = document.querySelector(\".form .error\");\n\n  // validate form\n  if (didToday.value === \"\" || moodRate.value === \"\") {\n    errorEl.textContent = \"Missing Information\";\n    return;\n  }\n  else {\n    errorEl.textContent = \"\";\n  }\n\n// create record\nlet todaysMood = {\n  name: didToday.value,\n  value: moodRate.value,\n  date: new Date().toISOString()\n};\n\n// if subtracting funds, convert amount to negative number\nif (!isAdding) {\n  todaysMood.value *= -1;\n}\n\n// add to beginning of current array of data\ntodaysMoods.unshift(todaysMood);\n\n // re-run logic to populate ui with new record\n//  populateChart();\n populateTable();\n populateTotal();\n \n // also send to server\n fetch(\"/api/todaysMood\", {\n   method: \"POST\",\n   body: JSON.stringify(todaysMood),\n   headers: {\n     Accept: \"application/json, text/plain, */*\",\n     \"Content-Type\": \"application/json\"\n   }\n })\n .then(response => {    \n   return response.json();\n })\n .then(data => {\n   if (data.errors) {\n     errorEl.textContent = \"Missing Information\";\n   }\n   else {\n     // clear form\n     didToday.value = \"\";\n     moodRate.value = \"\";\n   }\n })\n .catch(err => {\n   // fetch failed, so save in indexed db\n  //  saveRecord(todaysMood);\n\n   // clear form\n   didToday.value = \"\";\n   moodRate.value = \"\";\n });\n}\n\ndocument.querySelector(\"#saveMood-btn\").onclick = function() {\n sendTodaysMood(true);\n};\n\n  return (\n    <Container fluid>\n    <form>\n       <Card>\n         <Card.Body>\n         <Jumbotron>\n              <h1>TRACK YOUR MOOD</h1>\n            </Jumbotron>\n\n            <Row className=\"form-group\">\n            <Col size=\"md-12\">\n            <h3> How do you feel today?</h3>\n\n            <button id = \"moodRate\" className=\"gmoodBtton btn-success\"> \n                    GOOD\n            </button>\n            <button id = \"moodRate\" className=\"ymoodBtton btn-success\"> \n                    AVERAGE\n            </button>\n            <button id = \"moodRate\" className=\"rmoodBtton btn-success\"> \n                    BAD\n            </button>\n                </Col>\n                </Row>\n            \n          <Row className=\"form-group\">\n            <Col size=\"md-12\">\n            <h3>What Did You Do Today??</h3>\n                  <Input \n                  className=\"why\"\n                  type=\"why\" \n                  name=\"why\" \n                  id=\"why\" \n                  placeholder=\"Why ...?\" \n                  />\n                </Col>\n                </Row>\n     \n          <Row className=\"form-group\">\n            <Col size=\"md-12\">\n            <h3>What did you do today?</h3>\n                  <Input \n                  className=\"didToday\"\n                  type=\"didToday\" \n                  name=\"didToday\" \n                  id=\"didToday\" \n                  placeholder=\"Today i did..\" \n                  />\n                </Col>\n                </Row>\n          </Card.Body>\n          <div className=\"main chart-wrapper\">\n          <ReactEchartsCore\n          Chart={Chart}\n          />\n          </div>\n          <Card.Body>\n\n\n          </Card.Body>\n          </Card>\n          </form>\n          </Container>\n          \n    );\n  }\n  \n  export default MoodTracker;\n","  \nimport React from 'react';\n// import { Link } from \"react-router-dom\";\nimport \"./style.css\";\nimport { Container } from \"../Grid\";\nimport Nav from 'react-bootstrap/Nav'\n\nfunction NavBar() {\n  return (\n    <div>\n      <Container>\n        <Nav fill variant=\"tabs\" defaultActiveKey=\"/login\">\n        \n        <Nav.Item>\n        <Nav.Link className=\"messier navbar-brand navbar navbar-expand-lg\" href=\"/usersAccount\">\n        MESSIER\n        </Nav.Link>\n        </Nav.Item>\n   \n        <Nav.Item>\n        <Nav.Link className=\" navbar-brand navbar navbar-expand-lg\" href=\"/journal\">\n        Journal\n        </Nav.Link>\n        </Nav.Item>\n\n\n        <Nav.Item>\n        <Nav.Link className=\" navbar-brand navbar navbar-expand-lg\" href=\"/moodTracker\">\n        Mood\n        </Nav.Link>\n        </Nav.Item>\n\n{/* \n        <Nav.Item>\n        <Nav.Link className=\" navbar-brand navbar navbar-expand-lg\" href=\"/usersAccount\">\n        Account\n        </Nav.Link>\n        </Nav.Item> */}\n\n      </Nav>\n      </Container>\n    </div>\n  );\n}\n\nexport default NavBar;","import React from \"react\";\nimport \"./style.css\";\n\nfunction Footer() {\n  return (\n    <footer className=\"footer\">\n      <span>MESSIER</span>\n    </footer>\n  );\n}\n\nexport default Footer;\n","import React, { useState, } from \"react\";\nimport { Container, Row, Col } from \"../components/Grid\";\nimport \"./style.css\";\nimport { Card } from \"react-bootstrap\";\nimport Jumbotron from \"../components/Jumbotron\";\nimport Button from 'react-bootstrap/Button'\n\n\nfunction SignUp (){\n\n  const [username, setUsername] = useState();\n  const [password, setPassword] = useState();\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    console.log(\"username is \" + username);\n    console.log(\"password is \" + password);\n  };\n\n\n  return (\n    <Container fluid>\n    <form onSubmit={handleSubmit}>\n         <Card.Body>\n         <Jumbotron>\n              <h1>Sign In</h1>\n            </Jumbotron>\n\n            <Row className=\"form-group\">\n            <Col size=\"md-6\">\n                  <input \n                  className=\"form-control\"\n                  type=\"firstName\" \n                  name=\"firstName\" \n                  id=\"examplefirstName\" \n                  placeholder=\"First Name\" \n                  />\n                </Col>\n\n                <Col size=\"md-6\">\n                  <input \n                  className=\"form-control\"\n                  type=\"lastName\" \n                  name=\"lastName\" \n                  id=\"examplelastName\" \n                  placeholder=\"Last Name\" \n                  />\n                </Col>\n                </Row>\n\n                <Row className=\"form-group\">\n                <Col size=\"md-12\">\n                  <input \n                  className=\"form-control\"\n                  type=\"dob\"\n                  name=\"dob\" \n                  id=\"exampledob\" \n                  placeholder=\"Date of Birth\"  \n                  />\n                  </Col>\n                  </Row>\n\n\n                  <Row className=\"form-group\">\n                  <Col size=\"md-12\">\n                  <input                   \n                  className=\"form-control\"\n                  type=\"email\"\n                  name=\"email\" \n                  id=\"exampleemail\" \n                  placeholder=\"Email\" \n                  onChange={e => setUsername(e.target.value)} \n                  />\n                  </Col>\n                  </Row>\n\n               \n                  <Row className=\"form-group\">\n                  <Col size=\"md-12\">\n                  <input \n                  className=\"form-control\"\n                  type=\"password\" \n                  name=\"password\" \n                  id=\"examplePassword\" \n                  placeholder=\"Password\"  \n                  onChange={e => setPassword(e.target.value)}\n                  />\n                  </Col>\n                  </Row>\n\n                  <Row className=\"form-group\">\n                  <Col size=\"md-12\">\n                  <Button className=\"buttonSubmit\" type=\"submit\" href=\"/usersAccount\">\n                    Create Account\n                  </Button>                  \n                  </Col>\n                  </Row> \n                 </Card.Body>\n\n          \n    </form>\n  </Container>\n      \n      );\n    }\nexport default SignUp;","import React from \"react\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport UsersAccount from \"./pages/UsersAccount\";\nimport Journal from \"./pages/Journal\";\nimport Login from \"./pages/Login\";\nimport MoodTracker from \"./pages/MoodTracker\"\nimport Nav from \"./components/Nav\";\nimport Footer from \"./components/Footer\";\nimport SignUp from \"./pages/SignUp\"\n\nfunction App() {\n  return (\n    <Router>\n      <div>\n        <Nav />\n        \n          <Route exact path=\"/\" component={Login} />\n          <Route exact path=\"/journal\" component={Journal} />\n          <Route exact path=\"/moodTracker\" component={MoodTracker} />\n          <Route exact path=\"/usersAccount\" component={UsersAccount} />\n          <Route exact path=\"/signUp\" component={SignUp} />\n\n        \n        <Footer />\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}