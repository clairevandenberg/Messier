{"ast":null,"code":"var _jsxFileName = \"/Users/clairevandenberg/Desktop/coding_boot_camp/Projects/ProjectThree/projectthree/client/src/pages/MoodTracker.js\";\nimport React from \"react\";\nimport { Container, Row, Col } from \"../components/Grid\";\nimport \"./style.css\";\nimport { Card } from \"react-bootstrap\";\nimport { Input } from \"../components/Form\";\nimport Jumbotron from \"../components/Jumbotron\";\nimport LineChart from \"../components/MyChart\";\n\nfunction MoodTracker() {\n  let todaysMoods = []; // let myChart;\n\n  fetch(\"/api/todaysMood\").then(response => {\n    return response.json();\n  }).then(data => {\n    // save db data on global variable\n    todaysMoods = data;\n    populateTotal();\n    populateTable(); // populateChart();\n  });\n\n  function populateTotal() {\n    // reduce todaysMood amounts to a single total value\n    let total = todaysMoods.reduce((total, t) => {\n      return total + parseInt(t.value);\n    }, 0);\n    let totalEl = document.querySelector(\"#total\");\n    totalEl.textContent = total;\n  }\n\n  function populateTable() {\n    let tbody = document.querySelector(\"#tbody\");\n    tbody.innerHTML = \"\";\n    todaysMoods.forEach(todaysMood => {\n      // create and populate a table row\n      let tr = document.createElement(\"tr\");\n      tr.innerHTML = `\n      <td>${todaysMood.name}</td>\n      <td>${todaysMood.value}</td>\n    `;\n      tbody.appendChild(tr);\n    });\n  } // function populateChart() {\n  //   // copy array and reverse it\n  //   let reversed = todaysMoods.slice().reverse();\n  //   let sum = 0;\n  //   // create date labels for chart\n  //   let labels = reversed.map(t => {\n  //     let date = new Date(t.date);\n  //     return `${date.getMonth() + 1}/${date.getDate()}/${date.getFullYear()}`;\n  //   });\n  //   // create incremental values for chart\n  //   let data = reversed.map(t => {\n  //     sum += parseInt(t.value);\n  //     return sum;\n  //   });\n  //   // remove old chart if it exists\n  //   if (myChart) {\n  //     myChart.destroy();\n  //   }\n  // }\n\n\n  function sendTodaysMood(isAdding) {\n    let didToday = document.querySelector(\"#did-today\");\n    let moodRate = document.querySelector(\"#rating-mood\");\n    let errorEl = document.querySelector(\".form .error\"); // validate form\n\n    if (didToday.value === \"\" || moodRate.value === \"\") {\n      errorEl.textContent = \"Missing Information\";\n      return;\n    } else {\n      errorEl.textContent = \"\";\n    } // create record\n\n\n    let todaysMood = {\n      name: didToday.value,\n      value: moodRate.value,\n      date: new Date().toISOString()\n    }; // if subtracting funds, convert amount to negative number\n\n    if (!isAdding) {\n      todaysMood.value *= -1;\n    } // add to beginning of current array of data\n\n\n    todaysMoods.unshift(todaysMood); // re-run logic to populate ui with new record\n    //  populateChart();\n\n    populateTable();\n    populateTotal(); // also send to server\n\n    fetch(\"/api/todaysMood\", {\n      method: \"POST\",\n      body: JSON.stringify(todaysMood),\n      headers: {\n        Accept: \"application/json, text/plain, */*\",\n        \"Content-Type\": \"application/json\"\n      }\n    }).then(response => {\n      return response.json();\n    }).then(data => {\n      if (data.errors) {\n        errorEl.textContent = \"Missing Information\";\n      } else {\n        // clear form\n        didToday.value = \"\";\n        moodRate.value = \"\";\n      }\n    }).catch(err => {\n      // fetch failed, so save in indexed db\n      //  saveRecord(todaysMood);\n      // clear form\n      didToday.value = \"\";\n      moodRate.value = \"\";\n    });\n  }\n\n  document.querySelector(\"#saveMood-btn\").onclick = function () {\n    sendTodaysMood(true);\n  };\n\n  return /*#__PURE__*/React.createElement(Container, {\n    fluid: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"form\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Card, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 8\n    }\n  }, /*#__PURE__*/React.createElement(Card.Body, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 10\n    }\n  }, /*#__PURE__*/React.createElement(Jumbotron, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 10\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 15\n    }\n  }, \"TRACK YOUR MOOD\")), /*#__PURE__*/React.createElement(Row, {\n    className: \"form-group\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    size: \"md-12\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 13\n    }\n  }, \" How do you feel today?\"), /*#__PURE__*/React.createElement(\"button\", {\n    id: \"moodRate\",\n    className: \"gmoodBtton btn-success\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 13\n    }\n  }, \"GOOD\"), /*#__PURE__*/React.createElement(\"button\", {\n    id: \"moodRate\",\n    className: \"ymoodBtton btn-success\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 13\n    }\n  }, \"AVERAGE\"), /*#__PURE__*/React.createElement(\"button\", {\n    id: \"moodRate\",\n    className: \"rmoodBtton btn-success\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 13\n    }\n  }, \"BAD\"))), /*#__PURE__*/React.createElement(Row, {\n    className: \"form-group\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    size: \"md-12\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 13\n    }\n  }, \"What Did You Do Today??\"), /*#__PURE__*/React.createElement(Input, {\n    className: \"why\",\n    type: \"why\",\n    name: \"why\",\n    id: \"why\",\n    placeholder: \"Why ...?\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 19\n    }\n  }))), /*#__PURE__*/React.createElement(Row, {\n    className: \"form-group\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    size: \"md-12\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 13\n    }\n  }, \"What did you do today?\"), /*#__PURE__*/React.createElement(Input, {\n    className: \"didToday\",\n    type: \"didToday\",\n    name: \"didToday\",\n    id: \"didToday\",\n    placeholder: \"Today i did..\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 19\n    }\n  })))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"main chart-wrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(LineChart, {\n    data: this.state.feeds[0].data,\n    title: this.state.feeds[0].title,\n    color: \"#1D84D7\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(Card.Body, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 11\n    }\n  }))));\n}\n\nexport default MoodTracker;","map":{"version":3,"sources":["/Users/clairevandenberg/Desktop/coding_boot_camp/Projects/ProjectThree/projectthree/client/src/pages/MoodTracker.js"],"names":["React","Container","Row","Col","Card","Input","Jumbotron","LineChart","MoodTracker","todaysMoods","fetch","then","response","json","data","populateTotal","populateTable","total","reduce","t","parseInt","value","totalEl","document","querySelector","textContent","tbody","innerHTML","forEach","todaysMood","tr","createElement","name","appendChild","sendTodaysMood","isAdding","didToday","moodRate","errorEl","date","Date","toISOString","unshift","method","body","JSON","stringify","headers","Accept","errors","catch","err","onclick","state","feeds","title"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { Container, Row, Col } from \"../components/Grid\";\nimport \"./style.css\";\nimport { Card } from \"react-bootstrap\";\nimport { Input } from \"../components/Form\";\nimport Jumbotron from \"../components/Jumbotron\";\nimport LineChart from \"../components/MyChart\";\n\nfunction MoodTracker (){\n\n  let todaysMoods = [];\n  // let myChart;\n  \n  fetch(\"/api/todaysMood\")\n  .then(response => {\n    return response.json();\n  })\n  .then(data => {\n    // save db data on global variable\n    todaysMoods = data;\n\n    populateTotal();\n    populateTable();\n    // populateChart();\n  });\n\n  function populateTotal() {\n    // reduce todaysMood amounts to a single total value\n    let total = todaysMoods.reduce((total, t) => {\n      return total + parseInt(t.value);\n    }, 0);\n  \n    let totalEl = document.querySelector(\"#total\");\n    totalEl.textContent = total;\n  }\n\n  function populateTable() {\n    let tbody = document.querySelector(\"#tbody\");\n    tbody.innerHTML = \"\";\n  \n    todaysMoods.forEach(todaysMood => {\n      \n      // create and populate a table row\n    let tr = document.createElement(\"tr\");\n    tr.innerHTML = `\n      <td>${todaysMood.name}</td>\n      <td>${todaysMood.value}</td>\n    `;\n\n    tbody.appendChild(tr);\n  });\n}\n\n// function populateChart() {\n//   // copy array and reverse it\n//   let reversed = todaysMoods.slice().reverse();\n//   let sum = 0;\n\n//   // create date labels for chart\n//   let labels = reversed.map(t => {\n//     let date = new Date(t.date);\n//     return `${date.getMonth() + 1}/${date.getDate()}/${date.getFullYear()}`;\n//   });\n\n//   // create incremental values for chart\n//   let data = reversed.map(t => {\n//     sum += parseInt(t.value);\n//     return sum;\n//   });\n\n//   // remove old chart if it exists\n//   if (myChart) {\n//     myChart.destroy();\n//   }\n\n \n// }\n\n\nfunction sendTodaysMood(isAdding) {\n  let didToday = document.querySelector(\"#did-today\");\n  let moodRate = document.querySelector(\"#rating-mood\");\n  let errorEl = document.querySelector(\".form .error\");\n\n  // validate form\n  if (didToday.value === \"\" || moodRate.value === \"\") {\n    errorEl.textContent = \"Missing Information\";\n    return;\n  }\n  else {\n    errorEl.textContent = \"\";\n  }\n\n// create record\nlet todaysMood = {\n  name: didToday.value,\n  value: moodRate.value,\n  date: new Date().toISOString()\n};\n\n// if subtracting funds, convert amount to negative number\nif (!isAdding) {\n  todaysMood.value *= -1;\n}\n\n// add to beginning of current array of data\ntodaysMoods.unshift(todaysMood);\n\n // re-run logic to populate ui with new record\n//  populateChart();\n populateTable();\n populateTotal();\n \n // also send to server\n fetch(\"/api/todaysMood\", {\n   method: \"POST\",\n   body: JSON.stringify(todaysMood),\n   headers: {\n     Accept: \"application/json, text/plain, */*\",\n     \"Content-Type\": \"application/json\"\n   }\n })\n .then(response => {    \n   return response.json();\n })\n .then(data => {\n   if (data.errors) {\n     errorEl.textContent = \"Missing Information\";\n   }\n   else {\n     // clear form\n     didToday.value = \"\";\n     moodRate.value = \"\";\n   }\n })\n .catch(err => {\n   // fetch failed, so save in indexed db\n  //  saveRecord(todaysMood);\n\n   // clear form\n   didToday.value = \"\";\n   moodRate.value = \"\";\n });\n}\n\ndocument.querySelector(\"#saveMood-btn\").onclick = function() {\n sendTodaysMood(true);\n};\n\n\n  return (\n    <Container fluid>\n    <form>\n       <Card>\n         <Card.Body>\n         <Jumbotron>\n              <h1>TRACK YOUR MOOD</h1>\n            </Jumbotron>\n\n            <Row className=\"form-group\">\n            <Col size=\"md-12\">\n            <h3> How do you feel today?</h3>\n\n            <button id = \"moodRate\" className=\"gmoodBtton btn-success\"> \n                    GOOD\n            </button>\n            <button id = \"moodRate\" className=\"ymoodBtton btn-success\"> \n                    AVERAGE\n            </button>\n            <button id = \"moodRate\" className=\"rmoodBtton btn-success\"> \n                    BAD\n            </button>\n                </Col>\n                </Row>\n            \n          <Row className=\"form-group\">\n            <Col size=\"md-12\">\n            <h3>What Did You Do Today??</h3>\n                  <Input \n                  className=\"why\"\n                  type=\"why\" \n                  name=\"why\" \n                  id=\"why\" \n                  placeholder=\"Why ...?\" \n                  />\n                </Col>\n                </Row>\n     \n          <Row className=\"form-group\">\n            <Col size=\"md-12\">\n            <h3>What did you do today?</h3>\n                  <Input \n                  className=\"didToday\"\n                  type=\"didToday\" \n                  name=\"didToday\" \n                  id=\"didToday\" \n                  placeholder=\"Today i did..\" \n                  />\n                </Col>\n                </Row>\n          </Card.Body>\n          <div className=\"main chart-wrapper\">\n          <LineChart\n          data={this.state.feeds[0].data}\n          title={this.state.feeds[0].title}\n          color=\"#1D84D7\"\n          />\n          </div>\n          <Card.Body>\n\n\n          </Card.Body>\n          </Card>\n          </form>\n          </Container>\n          \n    );\n  }\n  \n  export default MoodTracker;"]},"metadata":{},"sourceType":"module"}