{"ast":null,"code":"var _jsxFileName = \"/Users/clairevandenberg/Desktop/coding_boot_camp/Projects/ProjectThree/projectthree/client/src/pages/MoodTracker.js\";\nimport React from \"react\";\nimport { Container, Row, Col } from \"../components/Grid\";\nimport \"./style.css\";\nimport { Card } from \"react-bootstrap\";\nimport { Input } from \"../components/Form\";\nimport Jumbotron from \"../components/Jumbotron\";\nimport LineChart from \"../components/MyChart\"; // import { Chart } from \"chart.js\";\n\nfunction MoodTracker() {\n  let todaysMoods = [];\n  let myChart;\n  fetch(\"/api/todaysMood\").then(response => {\n    return response.json();\n  }).then(data => {\n    // save db data on global variable\n    todaysMoods = data;\n    populateTotal();\n    populateTable();\n    populateChart();\n  });\n\n  function populateTotal() {\n    // reduce todaysMood amounts to a single total value\n    let total = todaysMoods.reduce((total, t) => {\n      return total + parseInt(t.value);\n    }, 0);\n    let totalEl = document.querySelector(\"#total\");\n    totalEl.textContent = total;\n  }\n\n  function populateTable() {\n    let tbody = document.querySelector(\"#tbody\");\n    tbody.innerHTML = \"\";\n    todaysMoods.forEach(todaysMood => {\n      // create and populate a table row\n      let tr = document.createElement(\"tr\");\n      tr.innerHTML = `\n      <td>${todaysMood.name}</td>\n      <td>${todaysMood.value}</td>\n    `;\n      tbody.appendChild(tr);\n    });\n  }\n\n  function populateChart() {\n    // copy array and reverse it\n    let reversed = todaysMoods.slice().reverse();\n    let sum = 0; // create date labels for chart\n\n    let labels = reversed.map(t => {\n      let date = new Date(t.date);\n      return `${date.getMonth() + 1}/${date.getDate()}/${date.getFullYear()}`;\n    }); // create incremental values for chart\n\n    let data = reversed.map(t => {\n      sum += parseInt(t.value);\n      return sum;\n    }); // remove old chart if it exists\n\n    if (myChart) {\n      myChart.destroy();\n    }\n  }\n\n  function sendTodaysMood(isAdding) {\n    let nameEl = document.querySelector(\"#t-name\");\n    let amountEl = document.querySelector(\"#t-amount\");\n    let errorEl = document.querySelector(\".form .error\"); // validate form\n\n    if (nameEl.value === \"\" || amountEl.value === \"\") {\n      errorEl.textContent = \"Missing Information\";\n      return;\n    } else {\n      errorEl.textContent = \"\";\n    } // create record\n\n\n    let todaysMood = {\n      name: nameEl.value,\n      value: amountEl.value,\n      date: new Date().toISOString()\n    }; // if subtracting funds, convert amount to negative number\n\n    if (!isAdding) {\n      todaysMood.value *= -1;\n    } // add to beginning of current array of data\n\n\n    todaysMoods.unshift(todaysMood); // re-run logic to populate ui with new record\n\n    populateChart();\n    populateTable();\n    populateTotal(); // also send to server\n\n    fetch(\"/api/todaysMood\", {\n      method: \"POST\",\n      body: JSON.stringify(todaysMood),\n      headers: {\n        Accept: \"application/json, text/plain, */*\",\n        \"Content-Type\": \"application/json\"\n      }\n    }).then(response => {\n      return response.json();\n    }).then(data => {\n      if (data.errors) {\n        errorEl.textContent = \"Missing Information\";\n      } else {\n        // clear form\n        nameEl.value = \"\";\n        amountEl.value = \"\";\n      }\n    }).catch(err => {\n      // fetch failed, so save in indexed db\n      saveRecord(todaysMood); // clear form\n\n      nameEl.value = \"\";\n      amountEl.value = \"\";\n    });\n  }\n\n  document.querySelector(\"#add-btn\").onclick = function () {\n    sendTodaysMood(true);\n  };\n\n  document.querySelector(\"#sub-btn\").onclick = function () {\n    sendTodaysMood(false);\n  };\n\n  return /*#__PURE__*/React.createElement(Container, {\n    fluid: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"form\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Card, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 8\n    }\n  }, /*#__PURE__*/React.createElement(Card.Body, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 10\n    }\n  }, /*#__PURE__*/React.createElement(Jumbotron, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 10\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 15\n    }\n  }, \"TRACK YOUR MOOD\")), /*#__PURE__*/React.createElement(Row, {\n    className: \"form-group\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    size: \"md-12\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 13\n    }\n  }, \" How do you feel today?\"), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"gmoodBtton btn-success\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 13\n    }\n  }, \"GOOD\"), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"ymoodBtton btn-success\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 13\n    }\n  }, \"AVERAGE\"), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"rmoodBtton btn-success\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 13\n    }\n  }, \"BAD\"))), /*#__PURE__*/React.createElement(Row, {\n    className: \"form-group\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    size: \"md-12\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 13\n    }\n  }, \"What Did You Do Today??\"), /*#__PURE__*/React.createElement(Input, {\n    className: \"todaysActivities\",\n    type: \"todaysActivities\",\n    name: \"todaysActivities\",\n    id: \"todaysActivities\",\n    placeholder: \"Today I ...?\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 19\n    }\n  }))), /*#__PURE__*/React.createElement(Row, {\n    className: \"form-group\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    size: \"md-12\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 13\n    }\n  }, \"What did you do today?\"), /*#__PURE__*/React.createElement(Input, {\n    className: \"doToday\",\n    type: \"doToday\",\n    name: \"doToday\",\n    id: \"doToday\",\n    placeholder: \"Today i did..\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 19\n    }\n  })))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"main chart-wrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(LineChart, {\n    data: this.state.feeds[0].data,\n    title: this.state.feeds[0].title,\n    color: \"#1D84D7\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(Card.Body, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 11\n    }\n  }))));\n}\n\nexport default MoodTracker;","map":{"version":3,"sources":["/Users/clairevandenberg/Desktop/coding_boot_camp/Projects/ProjectThree/projectthree/client/src/pages/MoodTracker.js"],"names":["React","Container","Row","Col","Card","Input","Jumbotron","LineChart","MoodTracker","todaysMoods","myChart","fetch","then","response","json","data","populateTotal","populateTable","populateChart","total","reduce","t","parseInt","value","totalEl","document","querySelector","textContent","tbody","innerHTML","forEach","todaysMood","tr","createElement","name","appendChild","reversed","slice","reverse","sum","labels","map","date","Date","getMonth","getDate","getFullYear","destroy","sendTodaysMood","isAdding","nameEl","amountEl","errorEl","toISOString","unshift","method","body","JSON","stringify","headers","Accept","errors","catch","err","saveRecord","onclick","state","feeds","title"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { Container, Row, Col } from \"../components/Grid\";\nimport \"./style.css\";\nimport { Card } from \"react-bootstrap\";\nimport { Input } from \"../components/Form\";\nimport Jumbotron from \"../components/Jumbotron\";\nimport LineChart from \"../components/MyChart\"\n// import { Chart } from \"chart.js\";\n\nfunction MoodTracker (){\n\n  let todaysMoods = [];\n  let myChart;\n  \n  fetch(\"/api/todaysMood\")\n  .then(response => {\n    return response.json();\n  })\n  .then(data => {\n    // save db data on global variable\n    todaysMoods = data;\n\n    populateTotal();\n    populateTable();\n    populateChart();\n  });\n\n  function populateTotal() {\n    // reduce todaysMood amounts to a single total value\n    let total = todaysMoods.reduce((total, t) => {\n      return total + parseInt(t.value);\n    }, 0);\n  \n    let totalEl = document.querySelector(\"#total\");\n    totalEl.textContent = total;\n  }\n\n  function populateTable() {\n    let tbody = document.querySelector(\"#tbody\");\n    tbody.innerHTML = \"\";\n  \n    todaysMoods.forEach(todaysMood => {\n      \n      // create and populate a table row\n    let tr = document.createElement(\"tr\");\n    tr.innerHTML = `\n      <td>${todaysMood.name}</td>\n      <td>${todaysMood.value}</td>\n    `;\n\n    tbody.appendChild(tr);\n  });\n}\n\nfunction populateChart() {\n  // copy array and reverse it\n  let reversed = todaysMoods.slice().reverse();\n  let sum = 0;\n\n  // create date labels for chart\n  let labels = reversed.map(t => {\n    let date = new Date(t.date);\n    return `${date.getMonth() + 1}/${date.getDate()}/${date.getFullYear()}`;\n  });\n\n  // create incremental values for chart\n  let data = reversed.map(t => {\n    sum += parseInt(t.value);\n    return sum;\n  });\n\n  // remove old chart if it exists\n  if (myChart) {\n    myChart.destroy();\n  }\n\n \n}\n\n\nfunction sendTodaysMood(isAdding) {\n  let nameEl = document.querySelector(\"#t-name\");\n  let amountEl = document.querySelector(\"#t-amount\");\n  let errorEl = document.querySelector(\".form .error\");\n\n  // validate form\n  if (nameEl.value === \"\" || amountEl.value === \"\") {\n    errorEl.textContent = \"Missing Information\";\n    return;\n  }\n  else {\n    errorEl.textContent = \"\";\n  }\n\n// create record\nlet todaysMood = {\n  name: nameEl.value,\n  value: amountEl.value,\n  date: new Date().toISOString()\n};\n\n// if subtracting funds, convert amount to negative number\nif (!isAdding) {\n  todaysMood.value *= -1;\n}\n\n// add to beginning of current array of data\ntodaysMoods.unshift(todaysMood);\n\n // re-run logic to populate ui with new record\n populateChart();\n populateTable();\n populateTotal();\n \n // also send to server\n fetch(\"/api/todaysMood\", {\n   method: \"POST\",\n   body: JSON.stringify(todaysMood),\n   headers: {\n     Accept: \"application/json, text/plain, */*\",\n     \"Content-Type\": \"application/json\"\n   }\n })\n .then(response => {    \n   return response.json();\n })\n .then(data => {\n   if (data.errors) {\n     errorEl.textContent = \"Missing Information\";\n   }\n   else {\n     // clear form\n     nameEl.value = \"\";\n     amountEl.value = \"\";\n   }\n })\n .catch(err => {\n   // fetch failed, so save in indexed db\n   saveRecord(todaysMood);\n\n   // clear form\n   nameEl.value = \"\";\n   amountEl.value = \"\";\n });\n}\n\ndocument.querySelector(\"#add-btn\").onclick = function() {\n sendTodaysMood(true);\n};\n\ndocument.querySelector(\"#sub-btn\").onclick = function() {\n  sendTodaysMood(false);\n};\n\n  return (\n    <Container fluid>\n    <form>\n       <Card>\n         <Card.Body>\n         <Jumbotron>\n              <h1>TRACK YOUR MOOD</h1>\n            </Jumbotron>\n\n            <Row className=\"form-group\">\n            <Col size=\"md-12\">\n            <h3> How do you feel today?</h3>\n\n            <button className=\"gmoodBtton btn-success\"> \n                    GOOD\n            </button>\n            <button className=\"ymoodBtton btn-success\"> \n                    AVERAGE\n            </button>\n            <button className=\"rmoodBtton btn-success\"> \n                    BAD\n            </button>\n                </Col>\n                </Row>\n            \n          <Row className=\"form-group\">\n            <Col size=\"md-12\">\n            <h3>What Did You Do Today??</h3>\n                  <Input \n                  className=\"todaysActivities\"\n                  type=\"todaysActivities\" \n                  name=\"todaysActivities\" \n                  id=\"todaysActivities\" \n                  placeholder=\"Today I ...?\" \n                  />\n                </Col>\n                </Row>\n     \n          <Row className=\"form-group\">\n            <Col size=\"md-12\">\n            <h3>What did you do today?</h3>\n                  <Input \n                  className=\"doToday\"\n                  type=\"doToday\" \n                  name=\"doToday\" \n                  id=\"doToday\" \n                  placeholder=\"Today i did..\" \n                  />\n                </Col>\n                </Row>\n          </Card.Body>\n          {/* <canvas ref={this.chartRef} />; */}\n          <div className=\"main chart-wrapper\">\n          <LineChart\n          data={this.state.feeds[0].data}\n          title={this.state.feeds[0].title}\n          color=\"#1D84D7\"\n          />\n          </div>\n          <Card.Body>\n\n\n          </Card.Body>\n          </Card>\n          </form>\n          </Container>\n          \n    );\n  }\n  \n  export default MoodTracker;"]},"metadata":{},"sourceType":"module"}