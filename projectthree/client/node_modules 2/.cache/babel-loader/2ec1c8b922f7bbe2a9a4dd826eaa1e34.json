{"ast":null,"code":"var _jsxFileName = \"/Users/clairevandenberg/Desktop/coding_boot_camp/Projects/ProjectThree/projectthree/client/src/components/MyChart/index.js\";\n\nclass LineChart extends React.Component {\n  constructor(props) {\n    super(props);\n    this.chartRef = React.createRef();\n  }\n\n  componentDidUpdate() {\n    this.myChart.data.labels = this.props.data.reversed.map(d => t.date);\n    this.myChart.data.datasets[0].data = this.props.reversed.data.map(d => t.value);\n    this.myChart.update();\n  }\n\n  componentDidMount() {\n    this.myChart = new Chart(this.chartRef.current, {\n      type: 'line',\n      data: {\n        labels,\n        datasets: [{\n          label: \"Mood Over Time\",\n          fill: true,\n          backgroundColor: \"#1D84D7\",\n          data\n        }]\n      }\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"canvas\", {\n      ref: this.chartRef,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 14\n      }\n    });\n  }\n\n}\n\nfunction populateChart() {\n  // copy array and reverse it\n  let reversed = todaysMoods.slice().reverse();\n  let sum = 0; // create date labels for chart\n\n  let labels = reversed.map(t => {\n    let date = new Date(t.date);\n    return `${date.getMonth() + 1}/${date.getDate()}/${date.getFullYear()}`;\n  }); // create incremental values for chart\n\n  let data = reversed.map(t => {\n    sum += parseInt(t.value);\n    return sum;\n  }); // remove old chart if it exists\n\n  if (myChart) {\n    myChart.destroy();\n  }\n}","map":{"version":3,"sources":["/Users/clairevandenberg/Desktop/coding_boot_camp/Projects/ProjectThree/projectthree/client/src/components/MyChart/index.js"],"names":["LineChart","React","Component","constructor","props","chartRef","createRef","componentDidUpdate","myChart","data","labels","reversed","map","d","t","date","datasets","value","update","componentDidMount","Chart","current","type","label","fill","backgroundColor","render","populateChart","todaysMoods","slice","reverse","sum","Date","getMonth","getDate","getFullYear","parseInt","destroy"],"mappings":";;AAAA,MAAMA,SAAN,SAAwBC,KAAK,CAACC,SAA9B,CAAwC;AACpCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,QAAL,GAAgBJ,KAAK,CAACK,SAAN,EAAhB;AACD;;AAEDC,EAAAA,kBAAkB,GAAG;AACnB,SAAKC,OAAL,CAAaC,IAAb,CAAkBC,MAAlB,GAA2B,KAAKN,KAAL,CAAWK,IAAX,CAAgBE,QAAhB,CAAyBC,GAAzB,CAA6BC,CAAC,IAAIC,CAAC,CAACC,IAApC,CAA3B;AACA,SAAKP,OAAL,CAAaC,IAAb,CAAkBO,QAAlB,CAA2B,CAA3B,EAA8BP,IAA9B,GAAqC,KAAKL,KAAL,CAAWO,QAAX,CAAoBF,IAApB,CAAyBG,GAAzB,CAA6BC,CAAC,IAAIC,CAAC,CAACG,KAApC,CAArC;AACA,SAAKT,OAAL,CAAaU,MAAb;AACD;;AAEDC,EAAAA,iBAAiB,GAAG;AAClB,SAAKX,OAAL,GAAe,IAAIY,KAAJ,CAAU,KAAKf,QAAL,CAAcgB,OAAxB,EAAiC;AAClDC,MAAAA,IAAI,EAAE,MAD4C;AAElDb,MAAAA,IAAI,EAAE;AACJC,QAAAA,MADI;AAEJM,QAAAA,QAAQ,EAAE,CAAC;AACPO,UAAAA,KAAK,EAAE,gBADA;AAEPC,UAAAA,IAAI,EAAE,IAFC;AAGPC,UAAAA,eAAe,EAAE,SAHV;AAIPhB,UAAAA;AAJO,SAAD;AAFN;AAF4C,KAAjC,CAAf;AAYL;;AAEGiB,EAAAA,MAAM,GAAG;AACP,wBAAO;AAAQ,MAAA,GAAG,EAAE,KAAKrB,QAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACD;;AA7BmC;;AAiCtC,SAASsB,aAAT,GAAyB;AACvB;AACA,MAAIhB,QAAQ,GAAGiB,WAAW,CAACC,KAAZ,GAAoBC,OAApB,EAAf;AACA,MAAIC,GAAG,GAAG,CAAV,CAHuB,CAKvB;;AACA,MAAIrB,MAAM,GAAGC,QAAQ,CAACC,GAAT,CAAaE,CAAC,IAAI;AAC7B,QAAIC,IAAI,GAAG,IAAIiB,IAAJ,CAASlB,CAAC,CAACC,IAAX,CAAX;AACA,WAAQ,GAAEA,IAAI,CAACkB,QAAL,KAAkB,CAAE,IAAGlB,IAAI,CAACmB,OAAL,EAAe,IAAGnB,IAAI,CAACoB,WAAL,EAAmB,EAAtE;AACD,GAHY,CAAb,CANuB,CAWvB;;AACA,MAAI1B,IAAI,GAAGE,QAAQ,CAACC,GAAT,CAAaE,CAAC,IAAI;AAC3BiB,IAAAA,GAAG,IAAIK,QAAQ,CAACtB,CAAC,CAACG,KAAH,CAAf;AACA,WAAOc,GAAP;AACD,GAHU,CAAX,CAZuB,CAiBvB;;AACA,MAAIvB,OAAJ,EAAa;AACXA,IAAAA,OAAO,CAAC6B,OAAR;AACD;AAGF","sourcesContent":["class LineChart extends React.Component {\n    constructor(props) {\n      super(props);\n      this.chartRef = React.createRef();\n    }\n  \n    componentDidUpdate() {\n      this.myChart.data.labels = this.props.data.reversed.map(d => t.date);\n      this.myChart.data.datasets[0].data = this.props.reversed.data.map(d => t.value);\n      this.myChart.update();\n    }\n  \n    componentDidMount() {\n      this.myChart = new Chart(this.chartRef.current, {\n    type: 'line',\n    data: {\n      labels,\n      datasets: [{\n          label: \"Mood Over Time\",\n          fill: true,\n          backgroundColor: \"#1D84D7\",\n          data\n      }]\n  }\n});\n}\n  \n    render() {\n      return <canvas ref={this.chartRef} />;\n    }\n  }\n\n\n  function populateChart() {\n    // copy array and reverse it\n    let reversed = todaysMoods.slice().reverse();\n    let sum = 0;\n  \n    // create date labels for chart\n    let labels = reversed.map(t => {\n      let date = new Date(t.date);\n      return `${date.getMonth() + 1}/${date.getDate()}/${date.getFullYear()}`;\n    });\n  \n    // create incremental values for chart\n    let data = reversed.map(t => {\n      sum += parseInt(t.value);\n      return sum;\n    });\n  \n    // remove old chart if it exists\n    if (myChart) {\n      myChart.destroy();\n    }\n  \n   \n  }"]},"metadata":{},"sourceType":"module"}