{"ast":null,"code":"var _jsxFileName = \"/Users/clairevandenberg/Desktop/coding_boot_camp/Projects/ProjectThree/projectthree/client/src/pages/MoodTracker.js\";\nimport React, { useState, useEffect } from \"react\";\nimport MyChart from \"../components/MyChart\";\nimport { Container, Row, Col } from \"../components/Grid\";\nimport \"./style.css\";\nimport { Card } from \"react-bootstrap\";\nimport Jumbotron from \"../components/Jumbotron\";\nimport { Chart } from 'react-charts';\nimport Button from 'react-bootstrap/Button';\nimport API from \"../utils/API\";\nimport { Input, FormBtn } from \"../components/Form\";\n\nfunction MoodTracker() {\n  // Setting our component's initial state\n  const [moodTrackers, setMoodTracker] = useState([]);\n  const [formObject, setFormObject] = useState({}); // Load all MoodTracker and store them with setMoodTracker\n\n  useEffect(() => {\n    loadMoodTracker();\n  }, []); // Loads all MoodTracker and sets them to MoodTracker\n\n  function loadMoodTracker() {\n    API.getMoodTracker().then(res => setMoodTracker(res.data)).catch(err => console.log(err));\n  }\n\n  ; // Handles updating component state when the user types into the input field\n\n  function handleInputChange(event) {\n    const {\n      moodRate,\n      didToday\n    } = event.target;\n    setFormObject({ ...formObject,\n      [moodRate]: didToday\n    });\n  }\n\n  ; // When the form is submitted, use the API.saveMoodTracker method to save the moodTracker data\n  // Then reload MoodTracker from the database\n\n  function handleFormSubmit(event) {\n    event.preventDefault();\n\n    if (formObject.moodRate && formObject.didToday) {\n      API.saveMoodTracker({\n        moodRate: formObject.moodRate,\n        didToday: formObject.didToday\n      }).then(res => loadMoodTracker()).catch(err => console.log(err));\n    }\n  }\n\n  ;\n  return /*#__PURE__*/React.createElement(Container, {\n    fluid: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Card, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 8\n    }\n  }, /*#__PURE__*/React.createElement(Card.Body, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 10\n    }\n  }, /*#__PURE__*/React.createElement(Jumbotron, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 10\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 15\n    }\n  }, \"TRACK YOUR MOOD\")), /*#__PURE__*/React.createElement(\"form\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Row, {\n    className: \"form-group\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    size: \"md-12\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }\n  }, \" On a scale of 1 to 10 how do you feel today?\"), /*#__PURE__*/React.createElement(Input, {\n    className: \"moodRate\",\n    onChange: handleInputChange,\n    type: \"moodRate\",\n    name: \"moodRate\",\n    id: \"moodRate\",\n    placeholder: \"10\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }\n  }))), /*#__PURE__*/React.createElement(Row, {\n    className: \"form-group\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    size: \"md-12\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 13\n    }\n  }, \"What did you do today?\"), /*#__PURE__*/React.createElement(Input, {\n    className: \"didToday\",\n    onChange: handleInputChange,\n    type: \"didToday\",\n    name: \"didToday\",\n    id: \"didToday\",\n    placeholder: \"Today i did..\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 19\n    }\n  }))), /*#__PURE__*/React.createElement(Row, {\n    className: \"form-group\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    size: \"md-12\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(FormBtn, {\n    onClick: handleFormSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 19\n    }\n  }, \"Save\"))))), /*#__PURE__*/React.createElement(Col, {\n    size: \"md-12\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Jumbotron, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 15\n    }\n  }, \"Your Moods\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"main chart-wrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(MyChart, {\n    Chart: Chart,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 11\n    }\n  })))));\n}\n\nexport default MoodTracker;","map":{"version":3,"sources":["/Users/clairevandenberg/Desktop/coding_boot_camp/Projects/ProjectThree/projectthree/client/src/pages/MoodTracker.js"],"names":["React","useState","useEffect","MyChart","Container","Row","Col","Card","Jumbotron","Chart","Button","API","Input","FormBtn","MoodTracker","moodTrackers","setMoodTracker","formObject","setFormObject","loadMoodTracker","getMoodTracker","then","res","data","catch","err","console","log","handleInputChange","event","moodRate","didToday","target","handleFormSubmit","preventDefault","saveMoodTracker"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport MyChart from \"../components/MyChart\";\nimport { Container, Row, Col } from \"../components/Grid\";\nimport \"./style.css\";\nimport { Card } from \"react-bootstrap\";\nimport Jumbotron from \"../components/Jumbotron\";\nimport { Chart } from 'react-charts'\nimport Button from 'react-bootstrap/Button'\nimport API from \"../utils/API\";\nimport { Input, FormBtn } from \"../components/Form\";\n\n\nfunction MoodTracker (){\n  // Setting our component's initial state\n  const [moodTrackers, setMoodTracker] = useState([])\n  const [formObject, setFormObject] = useState({})\n\n  // Load all MoodTracker and store them with setMoodTracker\n  useEffect(() => {\n    loadMoodTracker()\n  }, [])\n\n  // Loads all MoodTracker and sets them to MoodTracker\n  function loadMoodTracker() {\n    API.getMoodTracker()\n      .then(res => \n        setMoodTracker(res.data)\n      )\n      .catch(err => console.log(err));\n  };\n\n  // Handles updating component state when the user types into the input field\n  function handleInputChange(event) {\n    const { moodRate, didToday } = event.target;\n    setFormObject({...formObject, [moodRate]: didToday})\n  };\n\n  // When the form is submitted, use the API.saveMoodTracker method to save the moodTracker data\n  // Then reload MoodTracker from the database\n  function handleFormSubmit(event) {\n    event.preventDefault();\n    if (formObject.moodRate && formObject.didToday) {\n      API.saveMoodTracker({\n        moodRate: formObject.moodRate,\n        didToday: formObject.didToday\n      })\n        .then(res => loadMoodTracker())\n        .catch(err => console.log(err));\n    }\n};\n\n  return (\n    <Container fluid>\n    \n       <Card>\n         <Card.Body>\n         <Jumbotron>\n              <h1>TRACK YOUR MOOD</h1>\n            </Jumbotron>\n      <form>\n            <Row className=\"form-group\">\n            <Col size=\"md-12\">\n            <h3> On a scale of 1 to 10 how do you feel today?</h3>\n            <Input \n                  className=\"moodRate\"\n                  onChange={handleInputChange}\n                  type=\"moodRate\" \n                  name=\"moodRate\" \n                  id=\"moodRate\" \n                  placeholder=\"10\" \n                  />\n                </Col>\n                </Row>\n     \n          <Row className=\"form-group\">\n            <Col size=\"md-12\">\n            <h3>What did you do today?</h3>\n                  <Input \n                  className=\"didToday\"\n                  onChange={handleInputChange}\n                  type=\"didToday\" \n                  name=\"didToday\" \n                  id=\"didToday\" \n                  placeholder=\"Today i did..\" \n                  />\n                </Col>\n                </Row>\n\n                <Row className=\"form-group\">\n                  <Col size=\"md-12\">\n                  <FormBtn onClick={handleFormSubmit}>Save</FormBtn>                \n                  </Col>\n                  </Row> \n                </form>\n          </Card.Body>\n\n          <Col size=\"md-12\">\n            <Jumbotron>\n              <h1>Your Moods</h1>\n            </Jumbotron>\n          <div className=\"main chart-wrapper\">\n          <MyChart\n          Chart={Chart} />\n          </div>\n        \n          </Col>\n        </Card>\n      </Container>\n          \n    );\n  }\n  \n  export default MoodTracker;\n"]},"metadata":{},"sourceType":"module"}